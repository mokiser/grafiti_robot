@startuml

skinparam classAttributeIconSize 0
left to right direction

package "Robot Control System" {

  class GPIOController {
    - gpio_pins: std::vector<int>
    - gpio_chip_fd: int
    - pin_handles: std::vector<int>
    --
    - gpio_write(pin_index: int, value: uint8_t): void
    --
    + GPIOController()
    + forward(): void
    + backward(): void
    + left(): void
    + right(): void
    + stop(): void
    + ~GPIOController()
  }

  class MqttGpioReceiver {
    - mosq_: struct mosquitto*
    - last_gpio_data_: std::string
    - mutex_: std::mutex
    - thread_: std::thread
    - running_: bool
    --
    - {static} message_callback(mosq: struct mosquitto*, obj: void*, msg: const struct mosquitto_message*): void
    - loop(): void
    --
    + MqttGpioReceiver(host: const char*, port: int, topic: const char*)
    + ~MqttGpioReceiver()
    + get_gpio_data(): std::string
  }

  class GpioProcessor {
    - gpio_: GPIOController&
    - receiver_: MqttGpioReceiver&
    --
    + GpioProcessor(gpio: GPIOController&, receiver: MqttGpioReceiver&)
    + run(): void
  }

  note "Main function creates and connects:\nGPIOController, MqttGpioReceiver, GpioProcessor" as MainNote
  GpioProcessor .. MainNote
}

package "Server System" {

  class GraffitiDetectionServer {
    - client: mqtt.Client
    - cap: cv2.VideoCapture
    --
    + detect_graffiti(): bool
    + send_cleaning_command(command: str): void
    + process_frame(): void
    + run(): void
  }
}

GpioProcessor o-- GPIOController : controls
GpioProcessor o-- MqttGpioReceiver : receives\ncommands from

MqttGpioReceiver ..> "mosquitto" : uses
GPIOController ..> "linux/gpio.h" : uses
GraffitiDetectionServer ..> "paho.mqtt.client" : uses
GraffitiDetectionServer ..> "OpenCV" : uses

GraffitiDetectionServer --> MqttGpioReceiver : sends commands via\nMQTT (robot/gpio)
GraffitiDetectionServer --> GraffitiDetectionServer : processes\nvideo feed

@enduml